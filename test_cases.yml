---
- summary: |
    Проверка успешной регистрации.
  requirement: |
    Пользователь должен иметь возможность зарегистрироваться в игре.  
  prerequisites: |
    Открыта страница регистрации ("Sign Up").
  test-data: |
     Отсутствует.
  steps:
    1. Вводим Nickname.
    2. Вводим Emeil.
    3. Вводим Password (и подтверждение пароля).
    4. Нажимаем кнопку "Submit".
  expected-result: |
    Успешная регистрация пользователя.
    
- summary: |
    Проверка авторизации пользователя с существующими имейлом и паролем.
  requirement: |
    Пользователь должен войти в систему, имея верные имейлом и пароль.
  prerequisites: |
    Открыта страница авторизации ("Sign In").
  test-data: |
    Email = email, Password = password.
  steps:
    1. Вводим Emeil.
    2. Вводим Password.
    3. Нажимаем кнопку "Submit".
  expected-result: |     
    Успешная авторизация пользователя.

- summary: |
    Проверка авторизации через GitHub.
  requirement: |
    Пользователь должен иметь возможность авторизироваться, при наличии аккаунта на GitHub.
  prerequisites: |
    Открыта страница авторизации или регистрации ("Sign In"/"Sign Out").
  test-data: |
    Отсутствует.
  steps:
    - Нажимаем кнопку "Sign in with Github".
  expected-result: |     
    Успешная авторизация пользователя.

- summary: |
    Проверка авторизации через Discord.
  requirement: |
    Пользователь должен иметь возможность авторизироваться, при наличии аккаунта на Discord.
  prerequisites: |
    Открыта страница авторизации или регистрации ("Sign In"/"Sign Out").
  test-data: |
    Отсутствует.
  steps:
    - Нажимаем кнопку "Sign in with Discord".
  expected-result: |     
    Успешная авторизация пользователя.

- summary: |
    Проверка создания игры авторизованным пользователем.
  requirement: |
    Авторизованный пользователь должен иметь возможность создать игру.
  prerequisites: |
    Пользователь авторизован.
  test-data: |
    Отсутствует.
  steps:
    1. Нажимаем на кнопку "Create a game".
    2. Нажимаем на кнопку "With a bot" (Game Type). 
    3. Нажимаем на кнопку "Create Battle".
  expected-result: |     
    Игра успешно создана.

- summary: |
    Проверка создания игры неавторизованным пользователем.
  requirement: |
    Неавторизованный пользователь должен иметь возможность создать игру.
  prerequisites: |
    Открыта главная страница сайта. Пользователь не авторизован.
  test-data: |
    Отсутствует.
  steps:
    - Нажимаем на кнопку "Try Simple Buttle " 
  expected-result: |     
    Игра успешно создана.
    
- summary: |
    Проверка cоздания игры со случайным игроком.
  requirement: |
    Пользователь должен иметь возможность создать игру против другого пользователя (случайного игрока).
  prerequisites: |
    Пользователи авторизованы.
  test-data: |
    Отсутствует.
  steps:
    1. Нажимаем на кнопку "Create Game".
    2. Нажимаем на кнопку "With others users" (Game Type). 
    3. Нажимаем на кнопку "Create Battle".
    4. Пользователь 2 (случайный игрок) принимает запрос, игра начинается.
  expected-result: |     
    Игра с другим (случайным) игроком успешно создана.

- summary: |
    Проверка создания игры (с другим авторизованным пользователем).
  requirement: |
    Пользователь должен иметь возможность создавать игру с любым авторизованным игроком на выбор. 
  prerequisites: |
    Пользователи авторизованы.
  test-data: |
    Отсутствует.
  steps:
    1. Нажимаем на кнопку "Create Game".
    2. Нажимаем на кнопку "With a friend" (Game Type).
    3. Во вкладке "Choose opponent" выбираем оппонента. 
    4. Нажимаем на кнопку "Create Battle".
    5. Пользователь 2 принимает запрос, игра начинается.
  expected-result: |     
    Игра с другом (выбранным пользователем) успешно создана. 

- summary: |
    Проверка отправки приглашения другу для участия в игре.
  requirement: |
    Пользователь должен иметь возможность создавать игру с любым авторизованным игроком на выбор. 
  prerequisites: |
    Пользователи авторизованы.
  test-data: |
    Отсутствует.
  steps:
    1. Нажимаем на кнопку "Create Game".
    2. Нажимаем на кнопку "With a friend" (Game Type).
    3. Во вкладке "Choose opponent" выбираем оппонента. 
    4. Нажимаем Ctrl+Shift+I (Открываем "DevTools").
    5. Выбираем вкладку "Networks".
    6. Нажимаем на кнопку "Create Battle" ("Codebattle").
    7. Изучаем содержимое и статус запросов.
  expected-result: |     
    https://mc.yandex.com/clmap/56557825?page-url=https%3A%2F%2Fcodebattle.hexlet.io%2F%23lobby&pointer-
    click=rn%3A589582603%3Ax%3A34308%3Ay%3A40959%3At%3A970%3Ap%3A%3FAA1AAA2%3AX%3A773%3AY%3A690&browser-
    info=u%3A165313178878280528%3Av%3A1190%3Avf%3A3bfl5e3f8ptrmgtp6nxhmpy3%3Arqnl%3A1%3Ast%3A1702846512&t=gdpr(14)ti(1)
    Request Method: GET
    Status Code: 200 OK
    Приглашение другу (выбранному пользователю) успешно отправлено. 

- summary: |
    Проверка создания игры с другим уровнем сложности.
  requirement: |
    Игрок должен иметь возможность изменять сложность состязаний.
  prerequisites: |
    Пользователь авторизован.
  test-data: |
    Отсутствует.
  steps:
    1. Нажимаем на кнопку "Create Game".
    2. Выбираем четыре звезды в поле "Level".
    3. Нажимаем кнопку "With a bot" (Game Type).
    4. Нажимаем на кнопку "Create Battle".
  expected-result: |     
    Игра четвертого (максимального) уровня сложности успешно создана.   

- summary: |
    Проверка создания игры с конкретным заданием.
  requirement: |
    Игрок должен иметь возможность выбирать задания для состязаний из предложенного списка.
  prerequisites: |
    Пользователь авторизован.
  test-data: |
    Отсутствует.
  steps:
    1. Нажимаем на кнопку "Create Game".
    2. Нажимаем на кнопку "With a bot" (Game Type).
    3. Выбираем задание "boom" во вкладке "Choose task by name or tags".
    4. Нажимаем на кнопку "Create Battle".
  expected-result: |     
    Игра по заданию "boom" успешно создана.      

- summary: |
    Проверка возможности победы в игре.
  requirement: |
    Игрок должен иметь возможность побеждать в состязании.
  prerequisites: |
    Пользователь авторизован.
  test-data: |
    const _ = require("lodash");
    const R = require("rambda");
    const solution = (width, length) => {
    return width * length;
    };
    module.exports = solution;
  steps:
    1. Нажимаем на кнопку "Create Game".
    2. Выбираем одну звезду в поле "Level".
    3. Нажимаем на кнопку "With a bot" (Game Type).
    4. Выбираем задание "rect_area" во вкладке "Choose task by name or tags".
    5. Нажимаем на кнопку "Create Battle".
    6. В появившеся диалоговом окне выбираем язык node.js 16.17.0
    7. Вводим код из "test-data".
    8. Нажимаем кнопку "Run".
  expected-result: |     
    Появляется сообщение о победе в игре.          

- summary: |
    Проверка возможности проигрыша в игре.
  requirement: |
    Игрок должен иметь возможность проигрывать в состязании.
  prerequisites: |
    Пользователь авторизован.
  test-data: |
    Отсутствует.
  steps:
    1. Нажимаем на кнопку "Create Game".
    2. Нажимаем на кнопку "With a bot" (Game Type).
    3. Выставляем ползунок "Time Control" в крайне левое положение.
    4. Нажимаем на кнопку "Create Battle".
    5. Ждем три минуты.
  expected-result: |     
    Появляется сообщение о поражении. 

- summary: |
    Проверка создания турнира.
  requirement: |
    Игрок должен иметь возможность создавать турниры.
  prerequisites: |
    Пользователь авторизован.
  test-data: |
    В поле "Create a new tournament" значения выставлены по умолчанию.
    Отсутствует.
  steps:
    1. Заходим во вкладку "Tournaments".
    2. Кликаем "Tournaments Info".
    3. Нажимаем на кнопку "Create" (в поле "Create a new tournament").
  expected-result: |     
    Появляется сообщение о создании турнира в ближайшие несколько минут. 
    (Waiting Participants The tournament will start in...).  
